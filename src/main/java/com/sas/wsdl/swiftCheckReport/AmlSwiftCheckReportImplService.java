
package com.sas.wsdl.swiftCheckReport;

import java.net.MalformedURLException;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.security.cert.X509Certificate;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sas.util.AmlConfiguration;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "AmlSwiftCheckReportService", targetNamespace = "http://swiftCheck.webservice.sas.com/", wsdlLocation = "file:/C:/Users/boxuser/AppData/Local/Temp/tempdir2512266722206794790.tmp/amlSwiftCheckStatusReport_1.wsdl")
public class AmlSwiftCheckReportImplService
    extends Service
{
	private static final Logger logger = LoggerFactory.getLogger(AmlSwiftCheckReportImplService.class);
	
    private final static URL AMLSWIFTCHECKREPORTIMPLSERVICE_WSDL_LOCATION;
    private final static WebServiceException AMLSWIFTCHECKREPORTIMPLSERVICE_EXCEPTION;
    private final static QName AMLSWIFTCHECKREPORTIMPLSERVICE_QNAME = new QName("http://swiftCheck.webservice.sas.com/", "AmlSwiftCheckReportService");

    static {
    	disableSslVerification();
        URL url = null;
        WebServiceException e = null;
        try {
        	String swiftCheckReportUrl = AmlConfiguration.getString("com.sas.swiftCheckReport.url");
            url = new URL(swiftCheckReportUrl);
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
            logger.error(ex.getMessage(), ex);
        }
        AMLSWIFTCHECKREPORTIMPLSERVICE_WSDL_LOCATION = url;
        AMLSWIFTCHECKREPORTIMPLSERVICE_EXCEPTION = e;
    }

    public AmlSwiftCheckReportImplService() {
        super(__getWsdlLocation(), AMLSWIFTCHECKREPORTIMPLSERVICE_QNAME);
    }

    public AmlSwiftCheckReportImplService(WebServiceFeature... features) {
        super(__getWsdlLocation(), AMLSWIFTCHECKREPORTIMPLSERVICE_QNAME, features);
    }

    public AmlSwiftCheckReportImplService(URL wsdlLocation) {
        super(wsdlLocation, AMLSWIFTCHECKREPORTIMPLSERVICE_QNAME);
    }

    public AmlSwiftCheckReportImplService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, AMLSWIFTCHECKREPORTIMPLSERVICE_QNAME, features);
    }

    public AmlSwiftCheckReportImplService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AmlSwiftCheckReportImplService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns AmlSwiftCheckReport
     */
    @WebEndpoint(name = "AmlSwiftCheckReportPort")
    public AmlSwiftCheckReport getAmlSwiftCheckReportImplPort() {
        return super.getPort(new QName("http://swiftCheck.webservice.sas.com/", "AmlSwiftCheckReportPort"), AmlSwiftCheckReport.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AmlSwiftCheckReport
     */
    @WebEndpoint(name = "AmlSwiftCheckReportPort")
    public AmlSwiftCheckReport getAmlSwiftCheckReportImplPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://swiftCheck.webservice.sas.com/", "AmlSwiftCheckReportPort"), AmlSwiftCheckReport.class, features);
    }

    private static URL __getWsdlLocation() {
        if (AMLSWIFTCHECKREPORTIMPLSERVICE_EXCEPTION!= null) {
            throw AMLSWIFTCHECKREPORTIMPLSERVICE_EXCEPTION;
        }
        return AMLSWIFTCHECKREPORTIMPLSERVICE_WSDL_LOCATION;
    }
    
    private static void disableSslVerification() {
        try
        {
            // Create a trust manager that does not validate certificate chains
            TrustManager[] trustAllCerts = new TrustManager[] {
            	new X509TrustManager() {
	                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
	                    return null;
	                }
	                public void checkClientTrusted(X509Certificate[] certs, String authType) {
	                }
	                
					@Override
					public void checkClientTrusted(
							java.security.cert.X509Certificate[] arg0, String arg1)
							throws CertificateException {
						// TODO Auto-generated method stub
						logger.error("checkClientTrusted CertificateException");
					}
					
					@Override
					public void checkServerTrusted(
							java.security.cert.X509Certificate[] arg0, String arg1)
							throws CertificateException {
						// TODO Auto-generated method stub
						logger.error("checkServerTrusted CertificateException");
						
					}
	            }
            };

            // Install the all-trusting trust manager
            SSLContext sc = SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
          
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            // Create all-trusting host name verifier
            HostnameVerifier allHostsValid = new HostnameVerifier() {
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            };

            // Install the all-trusting host verifier
            HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
        } catch (NoSuchAlgorithmException e) {
            logger.error("NoSuchAlgorithmException : " + e.getMessage(), e);
        } catch (KeyManagementException e) {
        	logger.error("KeyManagementException : " + e.getMessage(), e);
        }
    }

}
